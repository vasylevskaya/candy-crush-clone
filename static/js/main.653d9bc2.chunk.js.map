{"version":3,"sources":["images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","images/blank.png","components/ScoreBoard.js","App.js","index.js"],"names":["ScoreBoard","score","className","candyColors","blueCandy","greenCandy","orangeandy","purpleCandy","redCandy","yellowCandy","App","useState","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","notification","setNotification","checkForColumn","useCallback","numberOfSquaresToCheck","lastIndexToCheck","i","decidedColor","column","y","push","every","square","prevScore","forEach","blank","checkForRow","notValidIndexes","row","includes","checkForColumnOfThree","checkForColumnOfFour","checkForColumnOfFive","checkForRowOfThree","checkForRowOfFour","checkForRowOfFive","moveIntoSquareBelow","randomNumber","Math","floor","random","length","clearNotificationState","setTimeout","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMove","isAColumnOfFive","isARowOfFive","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","useEffect","randomColorArrangement","width","randomColor","createBoard","timer","setInterval","clearInterval","map","candyColor","index","src","alt","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","onClick","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.653d9bc2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","const ScoreBoard = ({score}) => {\n  return (\n    <div className=\"score-board\">\n      <p>{score}</p>\n    </div>\n  )\n}\n\nexport default ScoreBoard\n","import { useState, useEffect, useCallback } from 'react'\nimport blueCandy from './images/blue-candy.png'\nimport greenCandy from './images/green-candy.png'\nimport orangeandy from './images/orange-candy.png'\nimport purpleCandy from './images/purple-candy.png'\nimport redCandy from './images/red-candy.png'\nimport yellowCandy from './images/yellow-candy.png'\nimport blank from './images/blank.png'\n\nimport ScoreBoard from './components/ScoreBoard'\n\nconst width = 8\nconst candyColors = [\n  blueCandy,\n  greenCandy,\n  orangeandy,\n  purpleCandy,\n  redCandy,\n  yellowCandy\n]\n\nconst App = () => {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([])\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null)\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null)\n  const [scoreDisplay, setScoreDisplay] = useState(0)\n  const [notification, setNotification] = useState('Start!')\n\n  const checkForColumn = useCallback((numberOfSquaresToCheck, lastIndexToCheck) => {\n    for (let i = 0; i <= lastIndexToCheck; i++) {\n      const decidedColor = currentColorArrangement[i]\n      const column = []\n\n      for (let y = 0; y < numberOfSquaresToCheck; y++) {\n        column.push(i + width * y)\n      }\n\n      if (column.every(square => currentColorArrangement[square] === decidedColor)) {\n        setScoreDisplay((prevScore) => prevScore + numberOfSquaresToCheck)\n        column.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }, [currentColorArrangement])\n\n  const checkForRow = useCallback((numberOfSquaresToCheck) => {\n    const notValidIndexes = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\n    if (numberOfSquaresToCheck >= 4) notValidIndexes.push([5, 13, 21, 29, 37, 45, 53, 62])\n    if (numberOfSquaresToCheck === 5) notValidIndexes.push([4, 12, 20, 28, 36, 44, 52, 61])\n\n    for (let i = 0; i < 64; i++) {\n      const decidedColor = currentColorArrangement[i]\n      const row = []\n\n      for (let y = 0; y < numberOfSquaresToCheck; y++) {\n        row.push(i + y)\n      }\n\n      if (notValidIndexes.includes(i)) continue\n      if (row.every(square => currentColorArrangement[square] === decidedColor)) {\n        setScoreDisplay((prevScore) => prevScore + numberOfSquaresToCheck * 10)\n        row.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }, [currentColorArrangement])\n\n  const checkForColumnOfThree = useCallback(() => checkForColumn(3, 47), [checkForColumn])\n  const checkForColumnOfFour = useCallback(() => checkForColumn(4, 39), [checkForColumn])\n  const checkForColumnOfFive = useCallback(() => checkForColumn(5, 31), [checkForColumn])\n  const checkForRowOfThree = useCallback(() => checkForRow(3), [checkForRow])\n  const checkForRowOfFour = useCallback(() => checkForRow(4), [checkForRow])\n  const checkForRowOfFive = useCallback(() => checkForRow(5), [checkForRow])\n\n  const moveIntoSquareBelow = useCallback(() => {\n    for (let i = 0; i < 55; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\n      const isFirstRow = firstRow.includes(i)\n\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length)\n        currentColorArrangement[i] = candyColors[randomNumber]\n      }\n\n      if ((currentColorArrangement[i + width]) === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i]\n        currentColorArrangement[i] = blank\n      }\n    }\n  }, [currentColorArrangement])\n\n  const clearNotificationState = () => setTimeout(() => setNotification(''), 2000)\n\n  const dragStart = (e) => setSquareBeingDragged(e.target)\n  const dragDrop = (e) => setSquareBeingReplaced(e.target)\n  const dragEnd = () => {\n    const squareBeingDraggedId = parseInt(squareBeingDragged?.getAttribute('data-id'))\n    const squareBeingReplacedId = parseInt(squareBeingReplaced?.getAttribute('data-id'))\n\n    currentColorArrangement[squareBeingReplacedId] = squareBeingDragged?.getAttribute('src')\n    currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced?.getAttribute('src')\n\n    const validMoves = [\n      squareBeingDraggedId - 1, squareBeingDraggedId - width,\n      squareBeingDraggedId + 1, squareBeingDraggedId + width,\n    ]\n    const validMove = validMoves.includes(squareBeingReplacedId)\n\n    const isAColumnOfFive = checkForColumnOfFive()\n    const isARowOfFive = checkForRowOfFive()\n    const isAColumnOfFour = checkForColumnOfFour()\n    const isARowOfFour = checkForRowOfFour()\n    const isAColumnOfThree = checkForColumnOfThree()\n    const isARowOfThree = checkForRowOfThree()\n\n    if (squareBeingReplacedId && validMove\n      && (isARowOfThree || isARowOfFour || isARowOfFive || isAColumnOfThree || isAColumnOfFour || isAColumnOfFive)) {\n        setSquareBeingDragged(null)\n        setSquareBeingReplaced(null)\n        if (isAColumnOfFive || isARowOfFive) {\n          setNotification('Good job!')\n          clearNotificationState()\n        }\n      } else {\n        currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced?.getAttribute('src')\n        currentColorArrangement[squareBeingDraggedId] = squareBeingDragged?.getAttribute('src')\n        setCurrentColorArrangement([...currentColorArrangement])\n      }\n  }\n\n  const createBoard = () => {\n    const randomColorArrangement = []\n    for (let i = 0; i< width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\n      randomColorArrangement.push(randomColor)\n    }\n    setCurrentColorArrangement(randomColorArrangement)\n  }\n\n  useEffect(() => {\n    clearNotificationState()\n    createBoard()\n  }, [])\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFive()\n      checkForRowOfFive()\n      checkForColumnOfFour()\n      checkForRowOfFour()\n      checkForColumnOfThree()\n      checkForRowOfThree()\n      moveIntoSquareBelow()\n      setCurrentColorArrangement([...currentColorArrangement])\n    }, 100)\n    return () => clearInterval(timer)\n  }, [\n    checkForColumnOfThree, checkForColumnOfFour, checkForColumnOfFive,\n    checkForRowOfThree, checkForRowOfFour, checkForRowOfFive,\n    moveIntoSquareBelow, currentColorArrangement,\n  ])\n\n  return (\n    <div className=\"App\">\n      <ScoreBoard score={scoreDisplay} />\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColor, index) => (\n          <img\n            key={index}\n            src={candyColor}\n            alt={candyColor}\n            data-id={index}\n            draggable\n            onDragStart={dragStart}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n            onClick={() => console.log(index)}\n          />\n        ))}\n          {notification && (\n            <div className=\"notification_container\">\n              <p className=\"notification\">\n                {notification}\n              </p>\n            </div>\n          )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}